type Employee = record {
  id : nat64;
  name : text;
  remaining_leave_days : nat32;
  department : text;
  position : text;
};
type Error = variant {
  InvalidInput : record { msg : text };
  NotFound : record { msg : text };
};
type LeaveRequest = record {
  id : nat64;
  status : LeaveStatus;
  end_date : nat64;
  start_date : nat64;
  employee_id : nat64;
  reason : text;
};
type LeaveStatus = variant { Approved; Rejected; Pending };
type Result = variant { Ok; Err : Error };
type Result_1 = variant { Ok : nat32; Err : Error };
type Result_2 = variant { Ok : Employee; Err : Error };
type Result_3 = variant { Ok : LeaveRequest; Err : Error };
service : {
  approve_leave_request : (nat64) -> (Result);
  calculate_leave_balance : (nat64) -> (Result_1) query;
  delete_employee : (nat64) -> (Result);
  delete_leave_request : (nat64) -> (Result);
  get_employee : (nat64) -> (Result_2) query;
  get_leave_request : (nat64) -> (Result_3) query;
  get_leave_requests_by_employee_id : (nat64) -> (vec LeaveRequest) query;
  get_pending_leave_requests : () -> (vec LeaveRequest) query;
  list_employees : () -> (vec Employee) query;
  list_leave_requests : () -> (vec LeaveRequest) query;
  register_employee : (text, text, text, nat32) -> (Result_2);
  reject_leave_request : (nat64) -> (Result);
  submit_leave_request : (nat64, nat64, nat64, text) -> (Result_3);
  update_employee : (nat64, text, text, text, nat32) -> (Result_2);
  update_leave_request : (nat64, nat64, nat64, text) -> (Result_3);
}
